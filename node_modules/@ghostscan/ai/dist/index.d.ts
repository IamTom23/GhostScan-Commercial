import { SaaSApp, AIAssistantQuery, BreachAlert, GhostProfile } from '@ghostscan/shared';
export interface ThreatAnalysis {
    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    confidence: number;
    reasoning: string[];
    recommendations: string[];
}
export interface BreachAnalysis {
    severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    impact: string[];
    affectedData: string[];
    recommendations: string[];
}
export interface PrivacyInsight {
    type: 'SECURITY' | 'PRIVACY' | 'COMPLIANCE' | 'RECOMMENDATION';
    title: string;
    description: string;
    priority: 'LOW' | 'MEDIUM' | 'HIGH';
    actionItems: string[];
}
export declare class ThreatAnalyzer {
    analyzeApp(app: SaaSApp): Promise<ThreatAnalysis>;
    private calculateRiskLevel;
    private generateRecommendations;
}
export declare class AIAssistant {
    processQuery(query: AIAssistantQuery): Promise<string>;
    generatePrivacyInsights(apps: SaaSApp[]): Promise<PrivacyInsight[]>;
}
export declare class BreachMonitor {
    checkForBreaches(email: string): Promise<BreachAlert[]>;
    analyzeBreach(breachData: any): Promise<BreachAnalysis>;
}
export declare class GhostProfileDetector {
    detectGhostProfiles(email: string): Promise<GhostProfile[]>;
    analyzeGhostProfile(profile: GhostProfile): Promise<{
        risk: 'LOW' | 'MEDIUM' | 'HIGH';
        recommendations: string[];
    }>;
}
//# sourceMappingURL=index.d.ts.map