"use strict";
// GhostScan Personal - AI/ML Functionality
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GhostProfileDetector = exports.BreachMonitor = exports.AIAssistant = exports.ThreatAnalyzer = void 0;
class ThreatAnalyzer {
    analyzeApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Integrate with OpenAI or custom ML model
            // For now, return a basic analysis based on app properties
            const riskFactors = [];
            let riskScore = 0;
            if (app.hasBreaches) {
                riskFactors.push('App has been involved in data breaches');
                riskScore += 3;
            }
            if (app.thirdPartySharing) {
                riskFactors.push('App shares data with third parties');
                riskScore += 2;
            }
            if (app.dataTypes.includes('personal') ||
                app.dataTypes.includes('financial')) {
                riskFactors.push('App handles sensitive data types');
                riskScore += 2;
            }
            if (app.passwordStrength === 'WEAK') {
                riskFactors.push('Weak password detected');
                riskScore += 2;
            }
            if (app.isReused) {
                riskFactors.push('Password is reused across multiple accounts');
                riskScore += 3;
            }
            const riskLevel = this.calculateRiskLevel(riskScore);
            const recommendations = this.generateRecommendations(app, riskLevel);
            return {
                riskLevel,
                confidence: 0.85,
                reasoning: riskFactors,
                recommendations,
            };
        });
    }
    calculateRiskLevel(score) {
        if (score <= 2)
            return 'LOW';
        if (score <= 4)
            return 'MEDIUM';
        if (score <= 6)
            return 'HIGH';
        return 'CRITICAL';
    }
    generateRecommendations(app, riskLevel) {
        const recommendations = [];
        if (app.hasBreaches) {
            recommendations.push('Change password immediately');
            recommendations.push('Enable two-factor authentication');
            recommendations.push('Monitor account for suspicious activity');
        }
        if (app.thirdPartySharing) {
            recommendations.push('Review privacy settings');
            recommendations.push('Opt out of data sharing if possible');
            recommendations.push('Check what data is being shared');
        }
        if (app.passwordStrength === 'WEAK') {
            recommendations.push('Use a strong, unique password');
            recommendations.push('Consider using a password manager');
        }
        if (app.isReused) {
            recommendations.push('Change password to be unique');
            recommendations.push('Use different passwords for each account');
        }
        if (riskLevel === 'HIGH' || riskLevel === 'CRITICAL') {
            recommendations.push('Consider deleting account if not essential');
            recommendations.push('Monitor for suspicious activity');
            recommendations.push('Review all connected services');
        }
        return recommendations;
    }
}
exports.ThreatAnalyzer = ThreatAnalyzer;
class AIAssistant {
    processQuery(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const { question, context } = query;
            const lowerQuestion = question.toLowerCase();
            // Simple rule-based responses for now
            // TODO: Integrate with OpenAI GPT for more sophisticated responses
            if (lowerQuestion.includes('canva') || lowerQuestion.includes('safe')) {
                return `Canva is generally safe for basic design work, but be aware that:
      
• They collect usage data and may analyze your designs for service improvement
• Free accounts have limited privacy controls
• Consider using Canva Pro for better privacy features
• Avoid uploading sensitive documents or personal information

For maximum privacy, consider using offline design tools for sensitive projects.`;
            }
            if (lowerQuestion.includes('grammarly') || lowerQuestion.includes('writing')) {
                return `Grammarly processes your text to provide writing suggestions, which means:

⚠️ **Privacy Concerns:**
• Your text is sent to their servers for analysis
• They may store your writing data
• Third-party integrations can access your content
• Consider what you're writing before using it

🔒 **Recommendations:**
• Use Grammarly only for non-sensitive content
• Review their privacy policy regularly
• Consider disabling data collection in settings
• For sensitive documents, use offline alternatives`;
            }
            if (lowerQuestion.includes('password') || lowerQuestion.includes('secure')) {
                return `Here are some password security best practices:

🔐 **Strong Passwords:**
• Use at least 12 characters
• Mix uppercase, lowercase, numbers, and symbols
• Avoid common words or patterns
• Use unique passwords for each account

🛡️ **Additional Security:**
• Enable two-factor authentication everywhere possible
• Use a password manager (like 1Password, Bitwarden)
• Regularly update passwords
• Monitor for data breaches

💡 **Quick Check:** I can help you identify weak or reused passwords in your accounts.`;
            }
            if (lowerQuestion.includes('breach') || lowerQuestion.includes('hacked')) {
                return `If you suspect a breach or your account has been compromised:

🚨 **Immediate Actions:**
• Change your password immediately
• Enable two-factor authentication
• Check for suspicious activity
• Review connected accounts

🔍 **Investigation:**
• Check if your email appears in known breaches
• Monitor your credit reports
• Review bank statements for unusual activity
• Consider freezing your credit

📱 **Tools:**
• Use our breach monitoring feature
• Check haveibeenpwned.com
• Monitor your accounts regularly`;
            }
            // Default response
            return `I'm your AI privacy assistant! I can help you with:

🔍 **App Security:** Ask about specific apps like "Is Canva safe?"
🔒 **Password Security:** Get advice on creating strong passwords
🚨 **Breach Monitoring:** Learn about data breaches and what to do
📱 **Privacy Tips:** Get personalized privacy recommendations
🛡️ **Account Management:** Advice on managing your digital footprint

Try asking me about a specific app, security concern, or privacy question!`;
        });
    }
    generatePrivacyInsights(apps) {
        return __awaiter(this, void 0, void 0, function* () {
            const insights = [];
            // Analyze password reuse
            const reusedPasswords = apps.filter(app => app.isReused);
            if (reusedPasswords.length > 0) {
                insights.push({
                    type: 'SECURITY',
                    title: 'Password Reuse Detected',
                    description: `${reusedPasswords.length} accounts are using reused passwords`,
                    priority: 'HIGH',
                    actionItems: [
                        'Change passwords to be unique for each account',
                        'Use a password manager to generate strong passwords',
                        'Enable two-factor authentication where possible'
                    ]
                });
            }
            // Analyze high-risk apps
            const highRiskApps = apps.filter(app => app.riskLevel === 'HIGH' || app.riskLevel === 'CRITICAL');
            if (highRiskApps.length > 0) {
                insights.push({
                    type: 'SECURITY',
                    title: 'High-Risk Apps Identified',
                    description: `${highRiskApps.length} apps pose significant privacy risks`,
                    priority: 'HIGH',
                    actionItems: [
                        'Review privacy settings for each high-risk app',
                        'Consider deleting non-essential high-risk accounts',
                        'Monitor these accounts for suspicious activity'
                    ]
                });
            }
            // Analyze breach history
            const breachedApps = apps.filter(app => app.hasBreaches);
            if (breachedApps.length > 0) {
                insights.push({
                    type: 'SECURITY',
                    title: 'Apps with Breach History',
                    description: `${breachedApps.length} apps have been involved in data breaches`,
                    priority: 'MEDIUM',
                    actionItems: [
                        'Change passwords for breached accounts',
                        'Enable two-factor authentication',
                        'Monitor for suspicious activity'
                    ]
                });
            }
            return insights;
        });
    }
}
exports.AIAssistant = AIAssistant;
class BreachMonitor {
    checkForBreaches(email) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Integrate with breach databases like HaveIBeenPwned
            // For now, return mock data
            return [];
        });
    }
    analyzeBreach(breachData) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Implement breach analysis logic
            return {
                severity: 'MEDIUM',
                impact: ['Email addresses exposed', 'Passwords potentially compromised'],
                affectedData: ['email', 'password'],
                recommendations: [
                    'Change password immediately',
                    'Enable two-factor authentication',
                    'Monitor for suspicious activity'
                ]
            };
        });
    }
}
exports.BreachMonitor = BreachMonitor;
class GhostProfileDetector {
    detectGhostProfiles(email) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Implement ghost profile detection
            // This would check various platforms for shadow profiles
            return [];
        });
    }
    analyzeGhostProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Implement ghost profile analysis
            return {
                risk: 'MEDIUM',
                recommendations: [
                    'Contact the platform to request data deletion',
                    'Monitor for unauthorized activity',
                    'Consider using a different email for sensitive accounts'
                ]
            };
        });
    }
}
exports.GhostProfileDetector = GhostProfileDetector;
//# sourceMappingURL=index.js.map