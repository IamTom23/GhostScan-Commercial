export interface SaaSApp {
    id: string;
    name: string;
    domain: string;
    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    dataTypes: string[];
    hasBreaches: boolean;
    thirdPartySharing: boolean;
    lastAccessed?: Date;
    oauthProvider?: string;
    accountStatus: 'ACTIVE' | 'INACTIVE' | 'DELETED';
    passwordStrength?: 'WEAK' | 'MEDIUM' | 'STRONG';
    isReused?: boolean;
}
export interface ScanResult {
    apps: SaaSApp[];
    totalRiskScore: number;
    recommendations: string[];
    timestamp: Date;
    scanType: 'BROWSER' | 'EMAIL' | 'OAUTH' | 'COMPREHENSIVE';
}
export interface PrivacyRequest {
    id: string;
    type: 'DELETE' | 'EXPORT' | 'OPT_OUT';
    appId: string;
    userId: string;
    status: 'PENDING' | 'SENT' | 'COMPLETED' | 'FAILED';
    createdAt: Date;
    completedAt?: Date;
    response?: string;
}
export interface BreachAlert {
    id: string;
    appId: string;
    breachDate: Date;
    dataTypes: string[];
    severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    description: string;
    isNew: boolean;
}
export interface GhostProfile {
    id: string;
    platform: string;
    email: string;
    username?: string;
    foundVia: 'BREACH' | 'OAUTH' | 'EMAIL_SCAN' | 'SHADOW_PROFILE';
    confidence: number;
    dataExposed: string[];
}
export interface UserProfile {
    id: string;
    email: string;
    riskScore: number;
    totalApps: number;
    highRiskApps: number;
    lastScanDate?: Date;
    preferences: {
        breachAlerts: boolean;
        weeklyReports: boolean;
        autoPrivacyRequests: boolean;
    };
}
export interface AIAssistantQuery {
    id: string;
    question: string;
    context: {
        appId?: string;
        scanResult?: ScanResult;
        userProfile?: UserProfile;
    };
    response?: string;
    timestamp: Date;
}
export interface EmailScanResult {
    id: string;
    email: string;
    subscriptions: {
        service: string;
        frequency: string;
        lastEmail: Date;
        category: string;
    }[];
    signups: {
        service: string;
        signupDate: Date;
        status: 'ACTIVE' | 'INACTIVE';
    }[];
}
export declare const calculateRiskScore: (apps: SaaSApp[]) => number;
export declare const getRiskColor: (riskLevel: string) => string;
export declare const formatDate: (date: Date) => string;
//# sourceMappingURL=index.d.ts.map