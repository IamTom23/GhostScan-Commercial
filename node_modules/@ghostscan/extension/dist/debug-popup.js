const statusDiv = document.getElementById('statusMessages');

function addStatus(message, type = 'info') {
    const div = document.createElement('div');
    div.className = type;
    div.textContent = message;
    statusDiv.appendChild(div);
    console.log(`[${type.toUpperCase()}] ${message}`);
}

function clearStatus() {
    statusDiv.innerHTML = '';
}

function testChromeAPI() {
    clearStatus();
    addStatus('Testing Chrome API...', 'loading');
    
    try {
        if (typeof chrome !== 'undefined' && chrome.runtime) {
            addStatus('✅ Chrome API available', 'success');
            addStatus(`Extension ID: ${chrome.runtime.id}`, 'success');
            
            // Test specific APIs
            chrome.runtime.sendMessage({ action: 'TEST_CHROME_API' }, (response) => {
                if (chrome.runtime.lastError) {
                    addStatus(`❌ API Test Error: ${chrome.runtime.lastError.message}`, 'error');
                } else if (response && response.success) {
                    const tests = response.data;
                    Object.entries(tests).forEach(([api, available]) => {
                        const status = available ? '✅' : '❌';
                        addStatus(`${status} ${api}: ${available ? 'Available' : 'Not Available'}`, available ? 'success' : 'error');
                    });
                } else {
                    addStatus('❌ API Test failed', 'error');
                }
            });
        } else {
            addStatus('❌ Chrome API not available', 'error');
        }
    } catch (error) {
        addStatus(`❌ Error: ${error.message}`, 'error');
    }
}

function testScan() {
    clearStatus();
    addStatus('🚀 Starting REAL privacy scan...', 'loading');
    addStatus('This will analyze your actual browser data', 'info');
    
    try {
        chrome.runtime.sendMessage({ action: 'START_SCAN' }, (response) => {
            if (chrome.runtime.lastError) {
                addStatus(`❌ Scan Error: ${chrome.runtime.lastError.message}`, 'error');
            } else if (response && response.success) {
                const data = response.data;
                addStatus('✅ Real scan completed successfully!', 'success');
                addStatus(`📊 Found ${data.apps.length} apps/services`, 'success');
                addStatus(`⚠️ Risk Score: ${data.totalRiskScore}/100`, data.totalRiskScore > 50 ? 'error' : 'success');
                addStatus(`💡 ${data.recommendations.length} recommendations`, 'info');
                
                // Show detailed app breakdown
                if (data.apps.length > 0) {
                    addStatus('📱 Apps detected:', 'info');
                    data.apps.forEach(app => {
                        const riskIcon = app.riskLevel === 'CRITICAL' ? '🚨' : 
                                       app.riskLevel === 'HIGH' ? '⚠️' : 
                                       app.riskLevel === 'MEDIUM' ? '⚡' : '✅';
                        addStatus(`${riskIcon} ${app.name} (${app.riskLevel})`, 
                                app.riskLevel === 'CRITICAL' || app.riskLevel === 'HIGH' ? 'error' : 'info');
                    });
                }
                
                // Show recommendations
                if (data.recommendations.length > 0) {
                    addStatus('💡 Recommendations:', 'info');
                    data.recommendations.forEach(rec => {
                        addStatus(`• ${rec}`, 'info');
                    });
                }
            } else {
                addStatus(`❌ Scan failed: ${response?.error || 'Unknown error'}`, 'error');
            }
        });
    } catch (error) {
        addStatus(`❌ Scan error: ${error.message}`, 'error');
    }
}

function testStorage() {
    clearStatus();
    addStatus('Testing storage...', 'loading');
    
    try {
        chrome.runtime.sendMessage({ action: 'GET_STORAGE_DATA' }, (response) => {
            if (chrome.runtime.lastError) {
                addStatus(`❌ Storage Error: ${chrome.runtime.lastError.message}`, 'error');
            } else if (response && response.success) {
                addStatus('✅ Storage test successful', 'success');
                const data = response.data;
                if (Object.keys(data).length === 0) {
                    addStatus('Storage is empty (normal for new install)', 'info');
                } else {
                    addStatus(`Storage contains ${Object.keys(data).length} items`, 'success');
                    Object.entries(data).forEach(([key, value]) => {
                        if (key === 'scanResult' && value) {
                            addStatus(`📊 Last scan: ${new Date(value.timestamp).toLocaleString()}`, 'success');
                            addStatus(`📱 Apps found: ${value.apps?.length || 0}`, 'info');
                            addStatus(`⚠️ Risk score: ${value.totalRiskScore || 0}/100`, 'info');
                        } else if (key === 'privacyScore') {
                            addStatus(`🛡️ Privacy Score: ${value}/100`, 'success');
                        } else if (key === 'lastScan') {
                            addStatus(`🕒 Last scan: ${new Date(value).toLocaleString()}`, 'info');
                        } else {
                            addStatus(`${key}: ${JSON.stringify(value).substring(0, 50)}...`, 'info');
                        }
                    });
                }
            } else {
                addStatus(`❌ Storage test failed: ${response?.error || 'Unknown error'}`, 'error');
            }
        });
    } catch (error) {
        addStatus(`❌ Storage error: ${error.message}`, 'error');
    }
}

function openDashboard() {
    try {
        chrome.tabs.create({ url: 'http://localhost:5175/' });
        addStatus('✅ Dashboard opened', 'success');
    } catch (error) {
        addStatus(`❌ Dashboard error: ${error.message}`, 'error');
    }
}

// Add event listeners
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('testApiBtn').addEventListener('click', testChromeAPI);
    document.getElementById('testScanBtn').addEventListener('click', testScan);
    document.getElementById('testStorageBtn').addEventListener('click', testStorage);
    document.getElementById('openDashboardBtn').addEventListener('click', openDashboard);
    
    addStatus('🚀 GhostScan Debug Popup Loaded!', 'success');
    addStatus('🔍 Real privacy scanning enabled', 'success');
    addStatus(`Extension Context: ${typeof chrome !== 'undefined' ? 'Yes' : 'No'}`, 'info');
    addStatus(`Window Size: ${window.innerWidth}x${window.innerHeight}`, 'info');
    
    // Auto-test Chrome API
    setTimeout(() => {
        testChromeAPI();
    }, 500);
});

console.log('GhostScan debug popup loaded with real scanning!'); 