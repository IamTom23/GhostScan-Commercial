interface ScanResult {
    apps: AppData[];
    totalRiskScore: number;
    recommendations: string[];
    timestamp: Date;
    scanType: string;
}
interface AppData {
    id: string;
    name: string;
    domain: string;
    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    dataTypes: string[];
    hasBreaches: boolean;
    thirdPartySharing: boolean;
    lastAccessed: Date;
    oauthProvider?: string;
    accountStatus: 'ACTIVE' | 'INACTIVE' | 'UNKNOWN';
    passwordStrength: 'WEAK' | 'MEDIUM' | 'STRONG';
    cookies?: CookieData[];
    trackingScripts?: string[];
}
interface CookieData {
    name: string;
    domain: string;
    value: string;
    secure: boolean;
    httpOnly: boolean;
    sameSite: string;
    expirationDate?: number;
}
declare class GhostScanBackground {
    private isScanning;
    private scanProgress;
    private visitedDomains;
    private oauthConnections;
    constructor();
    private initializeListeners;
    private onFirstInstall;
    private handleMessage;
    private startScan;
    private updateProgress;
    private collectCookies;
    private analyzeOAuthConnections;
    private analyzeBrowsingHistory;
    private detectTrackingScripts;
    private generateComprehensiveReport;
    private getOAuthDataTypes;
    private getAppNameFromDomain;
    private calculateRiskLevel;
    private calculateAppRiskScore;
    private checkForBreaches;
    private generateRecommendations;
    private testChromeAPI;
    private getStorageData;
    private storeScanResult;
    private clearScanData;
}
//# sourceMappingURL=background.d.ts.map